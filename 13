from product_builder import build_product
from code_writer import generate_tool, generate_sys_monitor
from affiliate_engine import match_affiliate_offer
from performance_tracker import score_output

def detect_domain(prompt):
    domains = {
        "system": ["kernel", "os", "memory", "firmware"],
        "infrastructure": ["docker", "kubernetes", "devops"],
        "security": ["encryption", "firewall", "token"]
    }
    for d, keys in domains.items():
        if any(k in prompt.lower() for k in keys):
            return d
    return "general"

def analyze_behavior(data):
    speed = data.get("avgSpeed", 0)
    corrections = data.get("backspaceCount", 0)
    hover = data.get("hoverTime", 0)

    if speed > 180 and hover < 3:
        return "direct"
    elif corrections > 5 or hover > 8:
        return "reassuring"
    elif speed < 80:
        return "patient"
    return "neutral"

def apply_tone_filter(text, tone):
    if tone == "direct":
        return text + " Letâ€™s move forward."
    elif tone == "reassuring":
        return "No rush. " + text
    elif tone == "patient":
        return "Take your time. " + text
    return text

def process_prompt(prompt, tier="free", behavior=None):
    domain = detect_domain(prompt)
    tone = analyze_behavior(behavior or {})
    prompt_lower = prompt.lower()

    if domain == "system":
        tool = generate_sys_monitor()
        score_output(tool["filename"], clicked=True, time_on_page=15)
        response = f"System tool created:\n\n{tool['description']}\n\n{tool['code']}"
        return {"response": apply_tone_filter(response, tone)}

    affiliate = match_affiliate_offer(prompt_lower)
    if affiliate:
        score_output(affiliate["title"], clicked=True)
        response = f"Offer: {affiliate['title']}\n{affiliate['link']}"
        return {"response": apply_tone_filter(response, tone)}

    if any(x in prompt_lower for x in ["generate", "tool", "script"]):
        tool = generate_tool(prompt)
        score_output(tool["description"], time_on_page=10)
        return {"response": apply_tone_filter(tool["description"], tone)}

    if "product" in prompt_lower:
        product = build_product(prompt)
        score_output(product["title"], time_on_page=12)
        return {"response": apply_tone_filter(product["description"], tone)}

    response = "What would you like me to build or find for you today?"
    return {"response": apply_tone_filter(response, tone)}
